@model dynamic
@using FinalProject_3K1D.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewBag.Title = "Payment";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #0A102E, #2D5299);
            font-family: Arial, sans-serif;
            color: #FFFFFF;
        }
        .payment-page-title {
            text-align: center;
            font-size: 40px;
            font-weight: bold;
            margin-top: 30px;
            color: #FFD700;
        }
        .order-container, .payment-container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
            color: #FFFFFF;
        }
        .order-container {
            background: linear-gradient(135deg, #1B1E3B, #4B4E70);
        }
        .payment-container {
            background: linear-gradient(135deg, #1B1E3B, #4B4E70);
            display: flex;
            justify-content: space-between;
        }
        .order-section h3, .payment-methods h3 {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #FFD700;
        }
        .order-item {
            background-color: #2B2E50;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }
        .order-item img {
            width: 50px;
            margin-right: 15px;
        }
        .order-item .details p {
            margin: 0;
        }
        .order-item .quantity input {
            width: 60px;
            text-align: center;
        }
        .payment-methods div {
            background-color: #2B2E50;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: background-color 0.3s, transform 0.3s;
        }
        .payment-methods div:hover, .payment-methods div.selected {
            background-color: #FFD700;
            transform: scale(1.05);
            color: #000000;
        }
        .payment-methods img {
            width: 40px;
            margin-right: 15px;
        }
        .discount-code {
            background-color: #FF5733;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            cursor: pointer;
            text-align: center;
        }
        .order-summary {
            background: linear-gradient(135deg, #2D5299, #1B1E3B);
            padding: 20px;
            border-radius: 10px;
        }
        .order-summary h3 {
            font-weight: bold;
            margin-bottom: 15px;
        }
        .order-summary .highlight {
            color: #FFDA47;
        }
        .buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        .buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-weight: bold;
        }
        .back-button {
            background-color: #FF5733;
            color: #FFFFFF;
        }
        .pay-button {
            background-color: #BBBBBB;
            color: #000;
            cursor: not-allowed;
        }
        .pay-button.enabled {
            background-color: #FFD700;
            color: #000;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1 class="payment-page-title">Order</h1>
    @foreach (var item in ViewBag.Foods as IEnumerable<Food>)
    {
        <div class="order-container">
            <div class="order-section">
                <h3>Combo</h3>
                <div class="order-item">
                    <img src="~/image/Order/@item.Apphich" alt="Apphich">
                    <div class="details">
                        <p><strong>@item.TenSanPham</strong></p>
                        <p>Mô tả: @item.MoTa</p>
                        <p>Giá: @item.Gia.ToString("C0") VND</p>
                    </div>
                    <div class="quantity">
                        <input type="number" class="food-quantity" data-gia="@item.Gia" data-name="@item.TenSanPham" data-id="@item.IdSanPham" value="0" min="0" step="1">
                    </div>
                </div>
            </div>
        </div>
    }

    <h4 class="payment-page-title">Payment</h4>
    <div class="payment-container">
        <div class="payment-methods">
            <h3>Phương thức thanh toán</h3>
            <div id="method1">
                <img src="~/image/MoMo_Logo.png" alt="Momo">
                Thanh toán qua Momo
            </div>
            <div id="method2">
                <img src="~/image/noidia.png" alt="Thẻ nội địa">
                Thanh toán qua Thẻ nội địa
            </div>
            <div id="method3">
                <img src="~/image/visa.png" alt="Thẻ quốc tế">
                Thanh toán qua thẻ quốc tế
            </div>
            <div id="discount-code" class="discount-code">
                Chọn hoặc nhập mã giảm giá
            </div>
        </div>
        <div class="order-summary">
            <h3>Tên phim: <span class="highlight">@ViewBag.MovieName</span></h3>
            <p>Tên khách hàng: @ViewBag.CustomerName</p>
            <p>Giờ chiếu: @ViewBag.GioChieu - @ViewBag.TenPhong - @ViewBag.TenRap</p>
            <p>Ghế đã chọn: @ViewBag.SelectedSeatIds</p>
            <p>Order đã chọn: <span id="selected-orders"></span></p>
            <hr>
            <h3>SỐ TIỀN ORDER: <span id="order-amount" class="highlight"></span></h3>
            <h3>SỐ TIỀN VÉ: <span id="ticket-amount" class="highlight">@ViewBag.TotalAmount VND</span></h3>
            <h3>SỐ TIỀN CẦN THANH TOÁN: <span id="total-amount-due" class="highlight"></span></h3>
            <div class="buttons">
                <button class="back-button" onclick="window.history.back()">QUAY LẠI</button>
                <button id="pay-button" class="pay-button" disabled>THANH TOÁN</button>
            </div>
        </div>
    </div>

    <script>
document.addEventListener("DOMContentLoaded", function() {
    const quantityInputs = document.querySelectorAll('.food-quantity');
    const selectedOrdersContainer = document.getElementById('selected-orders');
    const payButton = document.getElementById('pay-button');
    
    function updateSelectedOrders() {
        let orderAmount = 0;
        const selectedOrders = [];

        quantityInputs.forEach(input => {
            const id = input.getAttribute('data-id');
            const name = input.getAttribute('data-name');
            const quantity = parseInt(input.value, 10);
            const price = parseInt(input.getAttribute('data-gia'), 10);

            if (quantity > 0) {
                const itemTotal = quantity * price;
                orderAmount += itemTotal;
                selectedOrders.push(`Tên sản phẩm: ${name} (Số lượng: ${quantity}, Giá: ${price} VND)`);
            }
        });

        const ticketAmount = parseInt('@ViewBag.TotalAmount', 10);
        const totalAmountDue = orderAmount + ticketAmount;

        document.getElementById("order-amount").textContent = orderAmount.toLocaleString() + " VND";
        document.getElementById("ticket-amount").textContent = ticketAmount.toLocaleString() + " VND";
        document.getElementById("total-amount-due").textContent = totalAmountDue.toLocaleString() + " VND";
        selectedOrdersContainer.textContent = selectedOrders.join(', ');
    }

    quantityInputs.forEach(input => {
        input.addEventListener('input', updateSelectedOrders);
    });

    document.querySelectorAll('.payment-methods div').forEach(method => {
        method.addEventListener('click', () => {
            document.querySelectorAll('.payment-methods div').forEach(item => item.classList.remove('selected'));
            method.classList.add('selected');
            payButton.classList.add('enabled');
            payButton.disabled = false;
        });
    });

    payButton.addEventListener('click', function () {
        const selectedOrders = [];
        quantityInputs.forEach(input => {
            const name = input.getAttribute('data-name');
            const quantity = parseInt(input.value, 10);
            const price = parseInt(input.getAttribute('data-gia'), 10);

            if (quantity > 0) {
                selectedOrders.push(`Tên sản phẩm: ${name} (Số lượng: ${quantity}, Giá: ${price} VND)`);
            }
        });

        const selectedOrdersStr = selectedOrders.join(', ');

        fetch('@Url.Action("Payment", "Payment")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: new URLSearchParams({
                selectedOrders: selectedOrdersStr
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert("Thanh toán thành công!");
                window.location.href = '@Url.Action("Index", "Home")';
            } else {
                alert("Thanh toán thất bại: " + data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert("Đã xảy ra lỗi. Vui lòng thử lại.");
        });
    });

    updateSelectedOrders();
});
 document.querySelectorAll('.payment-methods div').forEach(method => {
            method.addEventListener('click', () => {
                // Xóa class 'selected' khỏi tất cả các phương thức thanh toán
                document.querySelectorAll('.payment-methods div').forEach(item => {
                    item.classList.remove('selected');
                });

                // Thêm class 'selected' vào phương thức đã chọn
                method.classList.add('selected');

                // Kích hoạt nút thanh toán
                document.getElementById('pay-button').classList.add('enabled');
                document.getElementById('pay-button').disabled = false;
            });
        });

        document.getElementById('pay-button').addEventListener('click', function () {
            // Xử lý thanh toán ở đây
            alert("Thanh toán thành công!");

            // Redirect đến trang home sau khi thanh toán thành công
            window.location.href = '@Url.Action("Index", "Home")';
        });
    </script>
</body>
</html>
