@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chọn Ghế</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
            color: white;
            font-family: 'Arial', sans-serif;
        }

        .screen-panel {
            text-align: center;
            background: linear-gradient(45deg, #434343, #000);
            color: white;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 1.4em;
            border-radius: 8px;
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.3);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .seats-panel {
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            gap: 12px;
            padding: 25px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.5);
        }

        .seat {
            border-radius: 6px;
            text-align: center;
            color: white;
            padding: 20px 0;
            font-weight: bold;
            transition: transform 0.2s, background-color 0.3s;
            cursor: pointer;
        }

            .seat:hover {
                transform: scale(1.1);
            }

            /* Seat color classes */
            .seat.vip {
                background-color: #ff5722;
            }

                .seat.vip:hover {
                    background-color: #e64a19;
                }

            .seat.deluxe {
                background-color: #00bcd4;
            }

                .seat.deluxe:hover {
                    background-color: #00796b;
                }

            .seat.standard {
                background-color: #8bc34a;
            }

                .seat.standard:hover {
                    background-color: #689f38;
                }

            .seat.selected {
                background-color: #ffeb3b;
                color: #000;
            }

        .footer {
            background: linear-gradient(45deg, #333, #555);
            border-radius: 15px;
            margin-top: 20px;
            padding: 20px;
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.3);
        }

        .footer-content {
            display: flex;
            flex-direction: column;
        }

        .info-panel p {
            margin: 0;
        }

        .summary-panel {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
            margin-top: 20px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .summary-info p {
            margin: 5px 0;
        }

        .btn-container .btn {
            margin-left: 10px;
            padding: 12px 30px;
            font-size: 1.2em;
            border-radius: 50px;
            transition: background-color 0.3s, transform 0.2s;
        }

        .btn-container .btn-pay {
            background-color: #ff9800;
            border-color: #ff9800;
        }

            .btn-container .btn-pay:hover {
                background-color: #e65100;
                transform: scale(1.05);
            }

        .btn-container .btn-cancel {
            background-color: #f44336;
            border-color: #f44336;
        }

            .btn-container .btn-cancel:hover {
                background-color: #c62828;
                transform: scale(1.05);
            }

        .legend-panel {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
            text-align: center;
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.3);
        }

        .legend span {
            display: inline-block;
            margin: 0 15px;
            padding: 5px 15px;
            border-radius: 5px;
            font-weight: bold;
        }

        .legend .vip {
            background-color: #ff5722;
            color: white;
        }

        .legend .deluxe {
            background-color: #00bcd4;
            color: white;
        }

        .legend .standard {
            background-color: #8bc34a;
            color: white;
        }

        .legend .selected {
            background-color: #ffeb3b;
            color: #000;
        }

        .legend .booked {
            background-color: #b0bec5;
            color: #000;
        }

        .btn-back {
            display: inline-flex;
            align-items: center;
            background: #ff5722;
            color: #fff;
            padding: 10px 20px;
            border-radius: 8px;
            font-size: 1rem;
            text-decoration: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.6);
            transition: background 0.3s, transform 0.3s;
            margin-bottom: 20px;
        }

            .btn-back:hover {
                background: #e64a19;
                transform: scale(1.05);
            }

            .btn-back i {
                margin-right: 8px;
            }

        .seat.booked {
            background-color: #b0bec5;
            cursor: not-allowed;
            pointer-events: none;
        }

            .seat.booked:hover {
                background-color: #b0bec5;
                transform: none;
            }
            .order-item {
            background-color: #2B2E50;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }
        .order-item img {
            width: 50px;
            margin-right: 15px;
        }
        .order-item .details p {
            margin: 0;
        }
        .order-item .quantity input {
            width: 60px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <!-- Nút quay lại -->
        <a href="javascript:history.back()" class="btn-back">
            <i class="fas fa-arrow-left"></i> Quay lại
        </a>

        <div class="screen-panel">Màn Hình</div>

        <div class="seats-panel"></div>

        <div class="legend-panel mt-4">
            <div class="legend">
                <span class="vip">VIP</span>
                <span class="deluxe">Deluxe</span>
                <span class="standard">Standard</span>
                <span class="selected">Ghế đang chọn</span>
                <span class="booked">Ghế đã được đặt</span>
            </div>
        </div>
        <h1 class="payment-page-title">Order</h1>
        @foreach (var item in ViewBag.foods as IEnumerable<Food>)
        {
                    <div class="order-container">
                        <div class="order-item">
                                <img src="~/image/Order/@item.Apphich" alt="Apphich">
                            <div class="details">
                                <p><strong>@item.TenSanPham</strong></p>
                                <p>Mô tả: @item.MoTa</p>
                                <p>Giá: @item.Gia.ToString() VND</p>
                            </div>
                            <div class="quantity">
                                <input type="number" class="food-quantity" data-gia="@item.Gia" data-name="@item.TenSanPham" data-id="@item.IdSanPham" value="0" min="0" step="1">
                            </div>
                        </div>
                    </div>
        }
        <div class="footer mt-4">
            <div class="footer-content">
                <div class="info-panel">
                    <p><strong>Tên phim</strong> @ViewBag.MovieName</p>
                    <p><strong>Giờ Chiếu:</strong> @ViewBag.GioChieu</p>
                    <p><strong>Phòng Chiếu:</strong> @ViewBag.TenPhong</p>
                    <p><strong>Rạp Chiếu:</strong> @ViewBag.TenRap</p>
                    <p><strong>Mã ghế ngồi:</strong> <span id="selected-seat-ids"></span></p>
                    <p><strong>Order đã chọn:</strong> <span id="selected-orders"></span></p>
                </div>
                <div class="summary-panel">
                    <div class="summary-info">
                         <p><strong>Tổng Order:</strong> <span id="order-amount" class="highlight"></span></p>
                        <p><strong>Tổng cộng:</strong> <span id="total-price">0 VND</span></p>
                    </div>
                    <div class="btn-container">
                        <button type="button" class="btn btn-select btn-warning">chọn</button>
                        <button type="button" class="btn btn-cancel" onclick="cancelSelection()">Hủy</button>
                        <button type="button" class="btn btn-pay btn-warning">Thanh Toán</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const seatPanel = document.querySelector('.seats-panel');
        const rows = 8;
        const columns = 10;
        const alphabet = 'ABCDEFGH'; // Row labels from A to H
        const selectedSeats = new Set(); // Store selected seat IDs
        const ticketPrice = @ViewBag.TicketPrice; // Example ticket price (in VND)
        let totalPrice = 0; // Variable to store the total price

        const quantityInputs = document.querySelectorAll('.food-quantity'); // Order item quantity inputs
        const selectedOrdersContainer = document.getElementById('selected-orders'); // Selected orders display

        // Function to debounce updates to avoid frequent triggering
        function debounce(func, wait = 300) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Function to update selected orders and total amount
        const updateSelectedOrders = debounce(() => {
            let orderAmount = 0;
            const selectedOrders = [];

            quantityInputs.forEach(input => {
                const id = input.getAttribute('data-id');
                const name = input.getAttribute('data-name');
                const quantity = parseInt(input.value, 10);
                const price = parseInt(input.getAttribute('data-gia'), 10);

                if (quantity > 0) {
                    const itemTotal = quantity * price;
                    orderAmount += itemTotal;
                    selectedOrders.push(`Tên sản phẩm: ${name} (Số lượng: ${quantity}, Giá: ${price.toLocaleString()} VND)`);
                }
            });

            document.getElementById("order-amount").textContent = `${orderAmount.toLocaleString()} VND`;
            selectedOrdersContainer.textContent = selectedOrders.join(', ');
        });

        // Update the total price display
        const vipPrice = ticketPrice * 1.3;  // VIP seats cost 30% more than standard price
        const deluxePrice = ticketPrice * 1.2;  // Deluxe seats cost 20% more than standard price
        const standardPrice = ticketPrice;  // Standard seats

        function updateTotalPrice() {
            totalPrice = 0;  // Reset total price

            selectedSeats.forEach(seatId => {
                const row = seatId.charAt(0);

                if (row === 'H') {
                    totalPrice += vipPrice;
                } else if (row === 'G' || row === 'F') {
                    totalPrice += deluxePrice;
                } else {
                    totalPrice += standardPrice;
                }
            });

            const totalElement = document.querySelector('#total-price');
            totalElement.textContent = `${totalPrice.toLocaleString()} VND`;
        }

        function updateSelectedSeatDisplay() {
            const selectedSeatIdsElement = document.getElementById('selected-seat-ids');
            selectedSeatIdsElement.textContent = Array.from(selectedSeats).join(', ');

            saveSelectedSeatsToSession(Array.from(selectedSeats));
        }

        function saveSelectedSeatsToSession(seatIds) {
            fetch('/Home/SaveSelectedSeats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                },
                body: JSON.stringify(seatIds)
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Failed to save selected seats to session');
                }
                return response.json();
            }).then(data => {
                console.log('Selected seats saved to session:', data);
            }).catch(error => {
                console.error('Error:', error);
            });
        }

        function cancelSelection() {
            selectedSeats.forEach(seatId => {
                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                if (seat) {
                    seat.classList.remove('selected');
                }
            });

            selectedSeats.clear();

            updateTotalPrice();
            updateSelectedSeatDisplay();
        }

        function fetchTakenSeats() {
            fetch('/Home/TakenSeat')
                .then(response => response.json())
                .then(bookedSeats => {
                    const takenSeatsSet = new Set(bookedSeats);

                    for (let i = 0; i < rows; i++) {
                        for (let j = 0; j < columns; j++) {
                            const seatId = `${alphabet[i]}${j + 1}`;
                            const seat = document.createElement('div');
                            seat.classList.add('seat');
                            seat.setAttribute('data-seat', seatId);

                            if (takenSeatsSet.has(seatId)) {
                                seat.classList.add('booked');
                                seat.style.cursor = 'not-allowed';
                                seat.removeEventListener('click', handleSeatClick);
                            } else {
                                if (alphabet[i] === 'H') {
                                    seat.classList.add('vip');
                                } else if (alphabet[i] === 'G' || alphabet[i] === 'F') {
                                    seat.classList.add('deluxe');
                                } else {
                                    seat.classList.add('standard');
                                }

                                seat.addEventListener('click', handleSeatClick);
                            }

                            seat.textContent = seatId;
                            seatPanel.appendChild(seat);
                        }
                    }

                    fetch('/Home/GetSelectedSeats')
                        .then(response => response.json())
                        .then(selectedSeatsFromSession => {
                            selectedSeatsFromSession.forEach(seatId => {
                                const seat = document.querySelector(`[data-seat="${seatId}"]`);
                                if (seat && !seat.classList.contains('booked')) {
                                    seat.classList.add('selected');
                                    selectedSeats.add(seatId);
                                }
                            });

                            updateTotalPrice();
                            updateSelectedSeatDisplay();
                        })
                        .catch(error => console.error('Error fetching selected seats:', error));
                })
                .catch(error => console.error('Error fetching taken seats:', error));
        }

        function handleSeatClick(event) {
            const seat = event.currentTarget;
            const seatId = seat.getAttribute('data-seat');

            if (seat.classList.contains('booked')) {
                return;
            }

            if (!seat.classList.contains('selected')) {
                seat.classList.add('selected');
                selectedSeats.add(seatId);
            } else {
                seat.classList.remove('selected');
                selectedSeats.delete(seatId);
            }

            updateTotalPrice();
            updateSelectedSeatDisplay();
        }

        fetchTakenSeats();
        quantityInputs.forEach(input => {
            input.addEventListener('input', updateSelectedOrders);
        });
        document.querySelector('.btn-cancel').addEventListener('click', cancelSelection);
         document.querySelector('.btn-cancel').addEventListener('click', cancelSelection);

    document.querySelector('.btn-select').addEventListener('click', () => {
        const selectedOrdersText = document.getElementById('selected-orders').innerText;
        if (!selectedOrdersText) {
            alert("Bạn chưa chọn order.");
            return;
        }

        const selectedOrders = selectedOrdersText.split(', '); // Assuming orders are separated by commas
        const orderAmountText = document.getElementById('order-amount').innerText;
        const orderAmount = parseFloat(orderAmountText.replace(/[^0-9.-]+/g, "")) || 0;

        if (orderAmount === 0) {
            alert("Tổng cộng không hợp lệ.");
            return;
        }

        const payload = {
            selectedOrders: selectedOrders,
            orderAmount: orderAmount
        };

        fetch('/Home/SaveOrderDetails', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': '@Html.AntiForgeryToken()' // CSRF protection
            },
            body: JSON.stringify(payload)
        }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert("Đã lưu đơn hàng thành công.");
                } else {
                    alert(data.message);
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('Có lỗi xảy ra khi lưu dữ liệu. Vui lòng thử lại.');
            });
    });
        const selectButton = document.querySelector('.btn-select');
         // Add event listener for the payment button
            document.querySelector('.btn-pay').addEventListener('click', () => {
                // Trigger the select button click
        selectButton.click();
                // Get the selected seat IDs and total price
                const selectedSeatsArray = Array.from(selectedSeats); // Assuming selectedSeats is already defined
                const totalAmount = parseFloat(totalPrice); // Assuming totalPrice is already defined and is a number

                if (selectedSeatsArray.length === 0 || totalAmount === 0) {
                                alert("Bạn chưa chọn ghế hoặc tổng cộng không hợp lệ.");
                                return;
                            }

                const payload = {
                    seatIds: selectedSeatsArray,
                    totalAmount: totalAmount,
                    
                };

                // Save the data to the session via an API call
                fetch('/Home/SavePaymentDetails', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': '@Html.AntiForgeryToken()' // CSRF protection
                    },
                    body: JSON.stringify(payload)
                }).then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Redirect to the payment view
                            window.location.href = '/Home/Payment';
                        } else {
                            alert(data.message); // Display error message
                        }
                    }).catch(error => {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi lưu dữ liệu. Vui lòng thử lại.');
                    });
            });
            
   

    });
</script>

</body>
</html>
