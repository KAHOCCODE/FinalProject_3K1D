@model IEnumerable<dynamic>

@{
    var startDate = ViewData["StartDate"] as DateTime?;
    var endDate = ViewData["EndDate"] as DateTime?;
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container mt-5">
    <h1 class="text-center text-uppercase fw-bold mb-4" style="color: #6A0DAD;">Doanh Thu Theo Thời Gian</h1>

    <form method="get" class="mb-5 p-4 rounded-3 shadow-sm" style="background: #f9f9f9;">
        <div class="row justify-content-center align-items-center">
            <div class="col-md-4 mb-3">
                <label for="startDate" class="form-label fw-bold text-secondary">Ngày Bắt Đầu:</label>
                <input type="date" id="startDate" name="startDate" class="form-control border-0 shadow-sm" value="@startDate?.ToString("yyyy-MM-dd")" style="background: #ffffff;" />
            </div>
            <div class="col-md-4 mb-3">
                <label for="endDate" class="form-label fw-bold text-secondary">Ngày Kết Thúc:</label>
                <input type="date" id="endDate" name="endDate" class="form-control border-0 shadow-sm" value="@endDate?.ToString("yyyy-MM-dd")" style="background: #ffffff;" />
            </div>
            <div class="col-md-2 mb-3 d-flex align-items-end">
                <button type="submit" class="btn btn-warning w-100 shadow-sm fw-bold text-dark" style="background-color: #FFD700; border-color: #FFD700;">Lọc</button>
            </div>
        </div>
    </form>

    <div class="card border-0 shadow-lg rounded-lg mb-5" style="background-color: #ffffff;">
        <div class="card-header text-white text-center rounded-top" style="background-color: #6A0DAD;">
            <h5 class="mb-0 fw-bold">Biểu Đồ Doanh Thu</h5>
        </div>
        <div class="card-body">
            <canvas id="revenueChart" width="400" height="200"></canvas>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-muted fw-bold">Danh Sách Doanh Thu</h2>
        <a href="@Url.Action("ExportToExcel", new { startDate, endDate })" class="btn btn-warning shadow-sm fw-bold" style="background-color: #FFD700; border-color: #FFD700;">Xuất Excel</a>
    </div>

    <!-- Danh Sách Doanh Thu -->
    <div class="table-responsive rounded-3 shadow-sm mb-5">
        <table class="table table-hover table-bordered text-center align-middle mb-0" style="background-color: #ffffff;">
            <thead style="background-color: #6A0DAD; color: #ffffff;">
                <tr>
                    <th class="py-3">Ngày</th>
                    <th class="py-3">Tổng Doanh Thu</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Any())
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="fw-bold text-secondary">@item.Date.ToString("yyyy-MM-dd")</td>
                            <td class="fw-bold text-success">@string.Format("{0:N0} ₫", item.TotalRevenue)</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2" class="text-muted py-4">Không có dữ liệu để hiển thị.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var ctx = document.getElementById('revenueChart').getContext('2d');
        var gradientFill = ctx.createLinearGradient(0, 0, 0, 400);
        gradientFill.addColorStop(0, 'rgba(106, 13, 173, 0.5)');
        gradientFill.addColorStop(1, 'rgba(255, 215, 0, 0.1)');

        var chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Select(d => d.Date.ToString("yyyy-MM-dd")))),
                datasets: [{
                    label: 'Tổng Doanh Thu',
                    data: @Html.Raw(Json.Serialize(Model.Select(d => d.TotalRevenue))),
                    backgroundColor: gradientFill,
                    borderColor: '#6A0DAD',
                    pointBackgroundColor: '#FFD700',
                    borderWidth: 3,
                    tension: 0.4,
                    pointRadius: 5,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            color: '#333',
                            font: {
                                size: 14
                            }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(0, 0, 0, 0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        callbacks: {
                            label: function (context) {
                                let value = context.raw;
                                return 'Tổng Doanh Thu: ' + new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value).replace("₫", "") + " ₫";
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: '#6A0DAD'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(200, 200, 200, 0.2)'
                        },
                        ticks: {
                            callback: function (value) {
                                return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value).replace("₫", "") + " ₫";
                            },
                            color: '#6A0DAD'
                        }
                    }
                }
            }
        });
    });
</script>
