@model IEnumerable<dynamic>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    ViewData["Title"] = "Danh sách hoàn vé";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}
<form method="get" asp-action="HoanVe">
    <div class="input-group mb-3">
        <input type="text" class="form-control" name="searchString3" placeholder="Tìm kiếm theo tên phim" value="@ViewData["SearchString3"]" />
        <button class="btn btn-primary" type="submit">Tìm kiếm</button>
    </div>
</form>

<div class="container mt-4">
    <h1 class="text-center text-primary mb-4">@ViewData["Title"]</h1>

    <div class="card shadow-lg border-0 rounded-3">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-warning">
                        <tr>
                            <th class="text-center">IdVe</th>
                            <th class="text-center">Tên Phim</th>
                            <th class="text-center">Tên Khách Hàng</th>
                            <th class="text-center">Giờ Chiếu</th>
                            <th class="text-center">Mã Ghế Ngồi</th>
                            <th class="text-center">Giá Tiền</th>
                            <th class="text-center">Ngày Mua</th>
                            <th class="text-center">Tên Phòng</th>
                            <th class="text-center">Lý Do Hoàn Vé</th>
                            <th class="text-center">Hành động</th>
                            <!-- New column for refund reason -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ticket in Model)
                        {
                                <tr>
                                    <td class="align-middle text-center">@ticket.IdVe</td>
                                    <td class="align-middle text-center">@ticket.TenPhim</td>
                                    <td class="align-middle text-center">@ticket.HoTen</td>
                                    <td class="align-middle text-center">@ticket.GioChieu.ToString("HH:mm:ss")</td>
                                    <td class="align-middle text-center">@ticket.MaGheNgoi</td>
                                    <td class="align-middle text-center">@ticket.TienBanVe.ToString("C")</td>
                                    <td class="align-middle text-center">@ticket.NgayMua?.ToString("dd/MM/yyyy")</td>
                                    <td class="align-middle text-center">@ticket.TenPhong</td>
                                    <td class="align-middle text-center">@ticket.NoiDung</td>
                                   <td>
                                   <button class="btn btn-success" onclick="confirmRefund(@ticket.IdVe)">✔</button>
                                   <button class="btn btn-danger" onclick="cancelRefund(@ticket.IdVe)">✘</button>
                                   </td>
                                </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Font Awesome for icons -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Function to handle refund confirmation (tick button)
    function confirmRefund(ticketId, ticketPrice, customerId) {
        Swal.fire({
            title: 'Bạn có chắc muốn hoàn vé?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Xác nhận',
            cancelButtonText: 'Hủy'
        }).then((result) => {
            if (result.isConfirmed) {
                // Calculate loyalty points based on ticket price
                const loyaltyPoints = ticketPrice * 0.001; // Convert 0.1% of the ticket price into loyalty points
                updateTicketStatus(ticketId, 0, loyaltyPoints, customerId); // Status 0 for confirmed refund
            }
        });
    }

    // Function to update ticket status and add loyalty points
    function updateTicketStatus(ticketId, status, loyaltyPoints = 0, customerId = null) {
        fetch('/Home/UpdateTicketStatus', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                IdVe: ticketId,
                Status: status,
                LoyaltyPoints: loyaltyPoints, // Pass loyalty points if it's a refund confirmation
                CustomerId: customerId // Pass customer ID for updating points
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.Success) {
                Swal.fire({
                    title: 'Thành công',
                    text: data.Message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload(); // Reload the page after success
                });
            } else {
                Swal.fire({
                    title: 'Lỗi',
                    text: data.Message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Lỗi',
                text: 'Có lỗi xảy ra khi xử lý yêu cầu.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            console.error('Error:', error);
        });
    }
</script>
